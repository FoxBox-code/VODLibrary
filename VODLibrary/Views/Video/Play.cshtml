@model VideoPlayModelView



<div>
    <video controls width="640" height="360">
        <source src="@Model.VideoPath" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<h1>@Model.Title</h1>

<div>
    <p>Uploaded by: @Model.OwnerName</p>
    <p>Uploaded on: @Model.Uploaded.ToString("dd/MM/yyyy")</p>
    <p>Views: @Model.Views</p>
    <p>Likes: @Model.Likes</p>
    <p>Dislikes: @Model.Dislikes</p>
</div>

<div>
    <!-- Optional: Add Like/Dislike buttons -->
    <button class="btn btn-success">Like</button>
    <button class="btn btn-danger">Dislike</button>
</div>

<div id="comments-section">
    <h2>Comments</h2>
    <ul id="comments-list">
        <!-- Comments will be dynamically loaded here -->
    </ul>

    <textarea id="comment-description" rows="4" cols="50" placeholder="Write a comment..."></textarea>
    <button id="submit-comment">Post Comment</button>
</div>


<script>
        const videoId = @Model.Id; // Pass the video ID from the model
        async function loadComments() {
        const response = await fetch(`/api/Comments/${videoId}`);
        const comments = await response.json();
        const commentsList = document.getElementById('comments-list');
        commentsList.innerHTML = ''; // Clear existing comments

        comments.forEach(comment => {
            // Create a comment item
            const listItem = document.createElement('li');
            listItem.dataset.commentId = comment.id;

            // Comment text
            listItem.innerHTML = `
                <p><strong>${comment.userName}:</strong> ${comment.description}</p>
                <button class="toggle-replies-btn" data-comment-id="${comment.id}">Show Replies</button>
                <ul class="replies-list" data-comment-id="${comment.id}" style="display: none;"></ul>
                <textarea class="reply-input" placeholder="Write a reply..." data-comment-id="${comment.id}"></textarea>
                <button class="post-reply-btn" data-comment-id="${comment.id}">Post Reply</button>
            `;

            commentsList.appendChild(listItem);
        });

        attachReplyEventHandlers(); // Attach event handlers for toggling and posting replies
    }

    function attachReplyEventHandlers() {
        // Handle "Show Replies" button clicks
        document.querySelectorAll('.toggle-replies-btn').forEach(button => {
            button.addEventListener('click', async (event) => {
                const commentId = event.target.dataset.commentId;
                const repliesList = document.querySelector(`.replies-list[data-comment-id="${commentId}"]`);

                if (repliesList.style.display === 'none') {
                    if (!repliesList.dataset.loaded) {
                        await loadReplies(commentId);
                        repliesList.dataset.loaded = true;
                    }
                    repliesList.style.display = 'block';
                    event.target.textContent = 'Hide Replies';
                } else {
                    repliesList.style.display = 'none';
                    event.target.textContent = 'Show Replies';
                }
            });
        });

        // Handle "Post Reply" button clicks
        document.querySelectorAll('.post-reply-btn').forEach(button => {
            button.addEventListener('click', async (event) => {
                const commentId = event.target.dataset.commentId;
                const replyInput = document.querySelector(`.reply-input[data-comment-id="${commentId}"]`);
                const description = replyInput.value;

                if (!description) {
                    alert('Reply cannot be empty!');
                    return;
                }

                const response = await fetch('/api/Comments/replies', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        userName: '@User.Identity.Name', // Replace with logged-in user's name
                        description: description,
                        commentId: commentId
                    })
                });

                if (response.ok) {
                    replyInput.value = ''; // Clear the input
                    await loadReplies(commentId); // Reload replies
                } else {
                    alert('Failed to post reply!');
                }
            });
        });
    }

    async function loadReplies(commentId) {
        const response = await fetch(`/api/Comments/replies/${commentId}`);
        const replies = await response.json();
        const repliesList = document.querySelector(`.replies-list[data-comment-id="${commentId}"]`);

        repliesList.innerHTML = ''; // Clear existing replies
        replies.forEach(reply => {
            const replyItem = document.createElement('li');
            replyItem.innerHTML = `<strong>${reply.userName}:</strong> ${reply.description}`;
            repliesList.appendChild(replyItem);
        });
    }

    // Load comments on page load
    loadComments();

</script>
